def fetch url
  Net::HTTP.get(URI.parse(url))
end 

def json_to_xml json
  wrapped = OpenStruct.new(body: OpenStruct.new(read: json))
  payload = Api::V1::Mobile::Renderer::BaseRenderer.payload_body wrapped
  request = Api::V1::Mobile::Ridp::RidpRequest.new(body: payload).create_question_request
  request[:xml].to_xml
end

def call_acapi method, xml
  Acapi::Requestor.request(method, {body: xml}, 7)
end

def initiate_session xml
  call_acapi "identity_verification.interactive_verification.initiate_session", xml
end

def respond_to_questions xml
  call_acapi "identity_verification.interactive_verification.respond_to_questions", xml
end

def check_override xml
  call_acapi "identity_verification.interactive_verification.override", xml
end

@url_base = "https://raw.githubusercontent.com/dchealthlink/HBX-mobile-app-APIs/master/static/ridp/live_test/"

def fetch_request_body scenario, stage, prefix, extension
  fname = [prefix, stage, :request, extension].compact.join "."
  path = [@url_base, scenario, fname].join "/"
  fetch path
end

def soap_request scenario, stage
  fetch_request_body scenario, stage, :soap, :xml 
end

def json_request scenario, stage
  fetch_request_body scenario, stage, :converted, :json 
end

def batch tries, pause #{e.g. initiate_session xml}
  print "Trying #{tries} times on #{Socket.gethostname} at #{Time.now} with #{pause} seconds pause, got statuses ", ((1..tries).map { sleep pause; resp = yield; resp['return_status'].to_i}.join ", "), "\n"
end



##############################
# GENERATED BY METAPROGRAM:

RESPONSES = {}
JSON_TO_XML = {}
JSON_RESPONSES = {}

      ########################
      # RAW XML TESTS
      
        key = :unknown_user_initiate_session
        xml = soap_request 'unknown_user', nil
        RESPONSES[key] = response = initiate_session xml
        status = response['return_status'].to_i
        print "Got #{status} for unknown_user:initiate_session\n"
        
        key = :valid_answers_initiate_session
        xml = soap_request 'valid_answers', nil
        RESPONSES[key] = response = initiate_session xml
        status = response['return_status'].to_i
        print "Got #{status} for valid_answers:initiate_session\n"
        
        key = :valid_answers_respond_to_questions
        xml = soap_request 'valid_answers', 'answers'
        RESPONSES[key] = response = respond_to_questions xml
        status = response['return_status'].to_i
        print "Got #{status} for valid_answers:respond_to_questions\n"
        
        key = :wrong_answers_initiate_session
        xml = soap_request 'wrong_answers', nil
        RESPONSES[key] = response = initiate_session xml
        status = response['return_status'].to_i
        print "Got #{status} for wrong_answers:initiate_session\n"
        
        key = :wrong_answers_respond_to_questions
        xml = soap_request 'wrong_answers', 'answers'
        RESPONSES[key] = response = respond_to_questions xml
        status = response['return_status'].to_i
        print "Got #{status} for wrong_answers:respond_to_questions\n"
        
        key = :wrong_answers_check_override
        xml = soap_request 'wrong_answers', 'override'
        RESPONSES[key] = response = check_override xml
        status = response['return_status'].to_i
        print "Got #{status} for wrong_answers:check_override\n"
        
      ########################
      # CONVERTED FROM JSON BY ENROLL-MOBILE-API TESTS
      
        key = :unknown_user_initiate_session
        json = json_request 'unknown_user', nil
        JSON_TO_XML[key] = xml = json_to_xml json
        RESPONSES[key] = response = initiate_session xml
        status = response['return_status'].to_i
        print "Got #{status} for unknown_user:initiate_session\n"
        
        key = :valid_answers_initiate_session
        json = json_request 'valid_answers', nil
        JSON_TO_XML[key] = xml = json_to_xml json
        RESPONSES[key] = response = initiate_session xml
        status = response['return_status'].to_i
        print "Got #{status} for valid_answers:initiate_session\n"
        
        key = :valid_answers_respond_to_questions
        json = json_request 'valid_answers', 'answers'
        JSON_TO_XML[key] = xml = json_to_xml json
        RESPONSES[key] = response = respond_to_questions xml
        status = response['return_status'].to_i
        print "Got #{status} for valid_answers:respond_to_questions\n"
        
        key = :wrong_answers_initiate_session
        json = json_request 'wrong_answers', nil
        JSON_TO_XML[key] = xml = json_to_xml json
        RESPONSES[key] = response = initiate_session xml
        status = response['return_status'].to_i
        print "Got #{status} for wrong_answers:initiate_session\n"
        
        key = :wrong_answers_respond_to_questions
        json = json_request 'wrong_answers', 'answers'
        JSON_TO_XML[key] = xml = json_to_xml json
        RESPONSES[key] = response = respond_to_questions xml
        status = response['return_status'].to_i
        print "Got #{status} for wrong_answers:respond_to_questions\n"
        
        key = :wrong_answers_check_override
        json = json_request 'wrong_answers', 'override'
        JSON_TO_XML[key] = xml = json_to_xml json
        RESPONSES[key] = response = check_override xml
        status = response['return_status'].to_i
        print "Got #{status} for wrong_answers:check_override\n"

####################
# METAPROGRAM:

def quote elem
  if elem then "'#{elem}'" else "nil" end
end

def thing var 
  "#" + "{" + var.to_s + "}"
end

def write_xml_fetch scenario, stage, isJson
  if isJson
    print """
        json = json_request #{quote(scenario)}, #{quote(stage)}
        JSON_TO_XML[key] = xml = json_to_xml json"""
  else print """
        xml = soap_request #{quote(scenario)}, #{quote(stage)}"""
  end
end

def compile
  scenarios = [:unknown_user, :valid_answers, :wrong_answers]
  stages = {initiate_session: nil, respond_to_questions: :answers, check_override: :override}
  steps = scenarios.each_with_index.flat_map{|s,i| stages.keys.slice(0,i+1).map{|k| [s, k, stages[k]]} }
  
  print """
##############################
# GENERATED BY METAPROGRAM:

RESPONSES = {}
JSON_TO_XML = {}
JSON_RESPONSES = {}
"""
  
  ["RAW XML", "CONVERTED FROM JSON BY ENROLL-MOBILE-API"].each_with_index do |type, index|
    print """
      ########################
      # #{type} TESTS
      """
    steps.map do |scenario, action, stage| 
      print """
        key = :#{scenario}_#{action}"""
      write_xml_fetch scenario, stage, (index == 1)
      print """
        RESPONSES[key] = response = #{action} xml
        status = response['return_status'].to_i
        print \"Got #{thing :status} for #{scenario}:#{action}\\n\"
        """
    end
  end
end 



