def fetch url
  #Net::HTTP.get(URI.parse(url))
  `curl #{url}`
end 

def json_to_xml json
  wrapped = OpenStruct.new(body: OpenStruct.new(read: json))
  payload = Api::V1::Mobile::Renderer::BaseRenderer.payload_body wrapped
  request = Api::V1::Mobile::Ridp::RidpRequest.new(body: payload).create_question_request
  request[:xml].to_xml
end

def call_acapi method, xml
  Acapi::Requestor.request(method, {body: xml}, 7)
end

def initiate_session xml
  call_acapi "identity_verification.interactive_verification.initiate_session", xml
end

def respond_to_questions xml
  call_acapi "identity_verification.interactive_verification.respond_to_questions", xml
end

def check_override xml
  call_acapi "identity_verification.interactive_verification.override", xml
end

@url_base = "https://raw.githubusercontent.com/dchealthlink/HBX-mobile-app-APIs/master/static/ridp/live_test/"

def fetch_request_body scenario, stage, prefix, extension
  fname = [prefix, stage, :request, extension].compact.join "."
  path = [@url_base, scenario, fname].join "/"
  fetch path
end

def soap_request scenario, stage
  fetch_request_body scenario, stage, :soap, :xml 
end

def json_request scenario, stage
  fetch_request_body scenario, stage, :converted, :json 
end

def batch tries, pause #{e.g. initiate_session xml}
  print "Trying #{tries} times on #{Socket.gethostname} at #{Time.now} with #{pause} seconds pause, got statuses ", ((1..tries).map { sleep pause; resp = yield; resp['return_status'].to_i}.join ", "), "\n"
end

def extract_state_from response
  result = {}
  [:session, :transaction].each do |k|
    elem = "intv:#{k}_id"
    key = "#{k.upcase}ID"
    re = /<#{elem}>(.*)<\/#{elem}>/
    result[key] = $1 if response[:body] =~ re
  end
  result
end
  
def insert_state_into request, state 
  state.keys.inject(request) do |r, key|
    r.gsub key, state[key]
  end
end

def show_response n
  k = RESPONSES.keys[n]
  out = ""
  (REXML::Document.new RESPONSES[k][:body]).write(out, 2)
  print "#{k}:\n#{out}\n\n"
end

def last_response
  show_response (RESPONSES.keys.length - 1)
end


##############################
# GENERATED BY METAPROGRAM:

RESPONSES      = {}
XMLS           = {}
session_state  = {}

      ########################
      # TESTS WITH raw 
      
        key = :unknown_user_initiate_session_raw
        XMLS[key] = xml_0 = insert_state_into (soap_request 'unknown_user', nil), session_state
        RESPONSES[key] = response_0 = initiate_session xml_0
        status_0 = response_0['return_status'].to_i
        print "Got #{status_0} for unknown_user:initiate_session\n"

        session_state = extract_state_from response_0
        
        key = :valid_answers_initiate_session_raw
        XMLS[key] = xml_1 = insert_state_into (soap_request 'valid_answers', nil), session_state
        RESPONSES[key] = response_1 = initiate_session xml_1
        status_1 = response_1['return_status'].to_i
        print "Got #{status_1} for valid_answers:initiate_session\n"

        session_state = extract_state_from response_1
        
        key = :valid_answers_respond_to_questions_raw
        XMLS[key] = xml_2 = insert_state_into (soap_request 'valid_answers', 'answers'), session_state
        RESPONSES[key] = response_2 = respond_to_questions xml_2
        status_2 = response_2['return_status'].to_i
        print "Got #{status_2} for valid_answers:respond_to_questions\n"

        session_state = extract_state_from response_2
        
        key = :wrong_answers_initiate_session_raw
        XMLS[key] = xml_3 = insert_state_into (soap_request 'wrong_answers', nil), session_state
        RESPONSES[key] = response_3 = initiate_session xml_3
        status_3 = response_3['return_status'].to_i
        print "Got #{status_3} for wrong_answers:initiate_session\n"

        session_state = extract_state_from response_3
        
        key = :wrong_answers_respond_to_questions_raw
        XMLS[key] = xml_4 = insert_state_into (soap_request 'wrong_answers', 'answers'), session_state
        RESPONSES[key] = response_4 = respond_to_questions xml_4
        status_4 = response_4['return_status'].to_i
        print "Got #{status_4} for wrong_answers:respond_to_questions\n"

        session_state = extract_state_from response_4
        
        key = :wrong_answers_check_override_raw
        XMLS[key] = xml_5 = insert_state_into (soap_request 'wrong_answers', 'override'), session_state
        RESPONSES[key] = response_5 = check_override xml_5
        status_5 = response_5['return_status'].to_i
        print "Got #{status_5} for wrong_answers:check_override\n"

        session_state = extract_state_from response_5
        
      ########################
      # TESTS WITH converted 
      
        key = :unknown_user_initiate_session_converted
        json = json_request 'unknown_user', nil
        XMLS[key] = xml_6 = insert_state_into (json_to_xml json), session_state
        RESPONSES[key] = response_6 = initiate_session xml_6
        status_6 = response_6['return_status'].to_i
        print "Got #{status_6} for unknown_user:initiate_session\n"

        session_state = extract_state_from response_6
        
        key = :valid_answers_initiate_session_converted
        json = json_request 'valid_answers', nil
        XMLS[key] = xml_7 = insert_state_into (json_to_xml json), session_state
        RESPONSES[key] = response_7 = initiate_session xml_7
        status_7 = response_7['return_status'].to_i
        print "Got #{status_7} for valid_answers:initiate_session\n"

        session_state = extract_state_from response_7
        
        key = :valid_answers_respond_to_questions_converted
        json = json_request 'valid_answers', 'answers'
        XMLS[key] = xml_8 = insert_state_into (json_to_xml json), session_state
        RESPONSES[key] = response_8 = respond_to_questions xml_8
        status_8 = response_8['return_status'].to_i
        print "Got #{status_8} for valid_answers:respond_to_questions\n"

        session_state = extract_state_from response_8
        
        key = :wrong_answers_initiate_session_converted
        json = json_request 'wrong_answers', nil
        XMLS[key] = xml_9 = insert_state_into (json_to_xml json), session_state
        RESPONSES[key] = response_9 = initiate_session xml_9
        status_9 = response_9['return_status'].to_i
        print "Got #{status_9} for wrong_answers:initiate_session\n"

        session_state = extract_state_from response_9
        
        key = :wrong_answers_respond_to_questions_converted
        json = json_request 'wrong_answers', 'answers'
        XMLS[key] = xml_10 = insert_state_into (json_to_xml json), session_state
        RESPONSES[key] = response_10 = respond_to_questions xml_10
        status_10 = response_10['return_status'].to_i
        print "Got #{status_10} for wrong_answers:respond_to_questions\n"

        session_state = extract_state_from response_10
        
        key = :wrong_answers_check_override_converted
        json = json_request 'wrong_answers', 'override'
        XMLS[key] = xml_11 = insert_state_into (json_to_xml json), session_state
        RESPONSES[key] = response_11 = check_override xml_11
        status_11 = response_11['return_status'].to_i
        print "Got #{status_11} for wrong_answers:check_override\n"

        session_state = extract_state_from response_11

####################
# METAPROGRAM:

def quote elem
  if elem then "'#{elem}'" else "nil" end
end

def thing var 
  "#" + "{" + var.to_s + "}"
end

def write_xml_fetch scenario, stage, isJson, xmlvar
  if isJson
    print """
        json = json_request #{quote(scenario)}, #{quote(stage)}
        XMLS[key] = #{xmlvar} = insert_state_into (json_to_xml json), session_state"""
  else print """
        XMLS[key] = #{xmlvar} = insert_state_into (soap_request #{quote(scenario)}, #{quote(stage)}), session_state"""
  end
end

def compile
  scenarios = [:unknown_user, :valid_answers, :wrong_answers]
  stages = {initiate_session: nil, respond_to_questions: :answers, check_override: :override}
  steps = scenarios.each_with_index.flat_map{|s,i| stages.keys.slice(0,i+1).map{|k| [s, k, stages[k]]} }
  n = 0

  print """
##############################
# GENERATED BY METAPROGRAM:

RESPONSES      = {}
XMLS           = {}
session_state  = {}
"""
  
  ["RAW XML", "XML CONVERTED FROM JSON BY ENROLL-MOBILE-API"].each_with_index do |type, index|
    type = if index == 0 then :raw else :converted end
    print """
      ########################
      # TESTS WITH #{type} 
      """
    steps.each do |scenario, action, stage| 
      print """
        key = :#{scenario}_#{action}_#{type}"""
      write_xml_fetch scenario, stage, (index == 1), "xml_#{n}"
      print """
        RESPONSES[key] = response_#{n} = #{action} xml_#{n}
        status_#{n} = response_#{n}['return_status'].to_i
        print \"Got #{thing "status_#{n}"} for #{scenario}:#{action}\\n\"

        session_state = extract_state_from response_#{n}
        """
      n += 1
    end
  end
  ""
end 


        

